//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TDBModelLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EmployeeTrainingEntities : DbContext
    {
        public EmployeeTrainingEntities()
            : base("name=EmployeeTrainingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ChangeOrderRequiredTraining> ChangeOrderRequiredTrainings { get; set; }
        public virtual DbSet<tblCurrentTrainingRequirement> tblCurrentTrainingRequirements { get; set; }
        public virtual DbSet<tblTrainingHistory> tblTrainingHistories { get; set; }
        public virtual DbSet<xxatr_jobprocedure_tracking> xxatr_jobprocedure_tracking { get; set; }
        public virtual DbSet<ElectronicSignature> ElectronicSignatures { get; set; }
    
        public virtual int pExecuteElectronicSignature(Nullable<System.Guid> electronicSignatureId, string executedPurpose, ObjectParameter result)
        {
            var electronicSignatureIdParameter = electronicSignatureId.HasValue ?
                new ObjectParameter("ElectronicSignatureId", electronicSignatureId) :
                new ObjectParameter("ElectronicSignatureId", typeof(System.Guid));
    
            var executedPurposeParameter = executedPurpose != null ?
                new ObjectParameter("ExecutedPurpose", executedPurpose) :
                new ObjectParameter("ExecutedPurpose", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pExecuteElectronicSignature", electronicSignatureIdParameter, executedPurposeParameter, result);
        }
    }
}
